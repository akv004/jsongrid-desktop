{"version":3,"file":"main.js","sources":["../../electron/main/main.ts"],"sourcesContent":["// electron/main/main.ts\nimport { app, BrowserWindow, ipcMain, dialog } from 'electron'\nimport { join, dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { readFile, writeFile } from 'node:fs/promises'\n\n// --- FIX: Recreate __dirname for ES Modules ---\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = dirname(__filename)\n// ---\n\nasync function createWindow() {\n    const win = new BrowserWindow({\n        width: 1280,\n        height: 800,\n        webPreferences: {\n            // This path will now be correctly resolved\n            preload: join(__dirname, '../preload/preload.js'),\n            contextIsolation: true,\n            nodeIntegration: false,\n            sandbox: true,\n        },\n    })\n\n    if (!app.isPackaged) {\n        await win.loadURL(process.env.VITE_DEV_SERVER_URL!)\n        win.webContents.openDevTools()\n    } else {\n        // This path will also be correctly resolved\n        await win.loadFile(join(__dirname, '../../dist/index.html'))\n    }\n}\n\n// --- FIX: Added .catch() to handle potential errors during window creation ---\napp.whenReady().then(createWindow).catch(e => console.error('Failed to create window:', e))\n\napp.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit() })\napp.on('activate', () => { if (BrowserWindow.getAllWindows().length === 0) createWindow() })\n\n// File open/save IPC handlers\nipcMain.handle('file:open', async () => {\n    const { canceled, filePaths } = await dialog.showOpenDialog({\n        filters: [{ name: 'JSON', extensions: ['json', 'jsonl'] }],\n        properties: ['openFile']\n    })\n    if (canceled || !filePaths[0]) return null\n    const text = await readFile(filePaths[0], 'utf-8')\n    return { filePath: filePaths[0], text }\n})\n\nipcMain.handle('file:save', async (_e, p: { filePath?: string; text: string }) => {\n    let filePath = p.filePath\n    if (!filePath) {\n        const res = await dialog.showSaveDialog({ filters: [{ name: 'JSON', extensions: ['json'] }] })\n        if (res.canceled || !res.filePath) return null\n        filePath = res.filePath\n    }\n    await writeFile(filePath, p.text, 'utf-8')\n    return { filePath }\n})"],"names":[],"mappings":";;;;AAOA,MAAM,aAAa,cAAc,YAAY,GAAG;AAChD,MAAM,YAAY,QAAQ,UAAU;AAGpC,eAAe,eAAe;AAC1B,QAAM,MAAM,IAAI,cAAc;AAAA,IAC1B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA;AAAA,MAEZ,SAAS,KAAK,WAAW,uBAAuB;AAAA,MAChD,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,MACjB,SAAS;AAAA,IAAA;AAAA,EACb,CACH;AAED,MAAI,CAAC,IAAI,YAAY;AACjB,UAAM,IAAI,QAAQ,QAAA,IAAY,mBAAoB;AAClD,QAAI,YAAY,aAAA;AAAA,EACpB,OAAO;AAEH,UAAM,IAAI,SAAS,KAAK,WAAW,uBAAuB,CAAC;AAAA,EAC/D;AACJ;AAGA,IAAI,UAAA,EAAY,KAAK,YAAY,EAAE,MAAM,CAAA,MAAK,QAAQ,MAAM,4BAA4B,CAAC,CAAC;AAE1F,IAAI,GAAG,qBAAqB,MAAM;AAAE,MAAI,QAAQ,aAAa,SAAU,KAAI,KAAA;AAAO,CAAC;AACnF,IAAI,GAAG,YAAY,MAAM;AAAE,MAAI,cAAc,cAAA,EAAgB,WAAW,EAAG,cAAA;AAAe,CAAC;AAG3F,QAAQ,OAAO,aAAa,YAAY;AACpC,QAAM,EAAE,UAAU,UAAA,IAAc,MAAM,OAAO,eAAe;AAAA,IACxD,SAAS,CAAC,EAAE,MAAM,QAAQ,YAAY,CAAC,QAAQ,OAAO,GAAG;AAAA,IACzD,YAAY,CAAC,UAAU;AAAA,EAAA,CAC1B;AACD,MAAI,YAAY,CAAC,UAAU,CAAC,EAAG,QAAO;AACtC,QAAM,OAAO,MAAM,SAAS,UAAU,CAAC,GAAG,OAAO;AACjD,SAAO,EAAE,UAAU,UAAU,CAAC,GAAG,KAAA;AACrC,CAAC;AAED,QAAQ,OAAO,aAAa,OAAO,IAAI,MAA2C;AAC9E,MAAI,WAAW,EAAE;AACjB,MAAI,CAAC,UAAU;AACX,UAAM,MAAM,MAAM,OAAO,eAAe,EAAE,SAAS,CAAC,EAAE,MAAM,QAAQ,YAAY,CAAC,MAAM,EAAA,CAAG,GAAG;AAC7F,QAAI,IAAI,YAAY,CAAC,IAAI,SAAU,QAAO;AAC1C,eAAW,IAAI;AAAA,EACnB;AACA,QAAM,UAAU,UAAU,EAAE,MAAM,OAAO;AACzC,SAAO,EAAE,SAAA;AACb,CAAC;"}